<?php

/*
 * This script can be used to make a fresh development installation of the
 * platform. Dev and test environments will be initialized.
 *
 * Requirements :
 *    - a valid 'app/config/local/parameters.yml' file
 *    - a writable app/config/local directory
 *    - an empty, writable app/cache directory
 *    - an empty, writable app/logs directory
 *    - a local installation of composer.phar in the root directory of the project
 */

$rootDirectory = realpath(__DIR__ . "/../..");

$start = time();

function refreshFile($file)
{
    file_put_contents($file, '');
}

refreshFile("{$rootDirectory}/app/config/local/plugin/bundles");
refreshFile("{$rootDirectory}/app/config/local/plugin/namespaces");
refreshFile("{$rootDirectory}/app/config/local/plugin/routing.yml");
refreshFile("{$rootDirectory}/app/logs/dev.log");
refreshFile("{$rootDirectory}/app/logs/test.log");

require_once __DIR__.'/delete_files';

system("composer install");
system("php {$rootDirectory}/app/console claroline:requirements", $returnCode);

if ($returnCode === 0) {

    system("php {$rootDirectory}/app/console doctrine:database:drop --force --env=dev");
    system("php {$rootDirectory}/app/console doctrine:database:create --env=dev");
    system("php {$rootDirectory}/app/console cache:clear --no-warmup --env=dev");
    system("php {$rootDirectory}/app/console claroline:install --with-plugins --with-fixtures --env=dev");

    system("php {$rootDirectory}/app/console doctrine:database:drop --force --env=test");
    system("php {$rootDirectory}/app/console doctrine:database:create --env=test");
    system("php {$rootDirectory}/app/console cache:clear --no-warmup --env=test");
    system("php {$rootDirectory}/app/console claroline:install --with-plugins --with-fixtures --env=test");

    system("php {$rootDirectory}/app/console cache:clear");
    system("php {$rootDirectory}/app/console claroline:plugins:fixtures");
    system("php {$rootDirectory}/app/console claroline:fixture:demo");
}

$end = time();
$secs = $end - $start;

if ($secs === 0) {
    return '0s';
}

$bit = array(
    'y' => $secs / 31556926 % 12,
    'w' => $secs / 604800 % 52,
    'd' => $secs / 86400 % 7,
    'h' => $secs / 3600 % 24,
    'm' => $secs / 60 % 60,
    's' => $secs % 60
    );

foreach ($bit as $k => $v) {
    if ($v > 0) {
        $ret[] = $v . $k;
    }
}

$duration = join(' ', $ret);

echo "Total script duration: {$duration}\n";
