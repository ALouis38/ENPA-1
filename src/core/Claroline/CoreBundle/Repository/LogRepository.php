<?php

namespace Claroline\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Claroline\CoreBundle\Entity\User;

class LogRepository extends EntityRepository
{
    public function findLastLogs($user, $workspace = null)
    {
        //There are too many queries generated by doctrine.
        //1 per resource ancestor... WHY ? get the ancestors in the 1st place ?
        //partial object do not work (yet)
        if ($user === 'anon.' && $workspace === null) {
            throw new \RuntimeException(
                "Resource logs for an anonymous outside a workspace doesn't make sense (no desktop)"
            );
        }

        $dql = "
            SELECT DISTINCT rl, res, rt FROM Claroline\CoreBundle\Entity\Logger\Log rl
            LEFT JOIN rl.workspace ws
            LEFT JOIN rl.resource res
            LEFT JOIN res.resourceType rt
            LEFT JOIN ws.roles r
            LEFT JOIN rl.doer doer";

        if ($workspace !== null) {
            $dql .= " WHERE ws.id = {$workspace->getId()} ";
        }

        if ($user !== 'anon.' && $workspace === null) {
            $dql .= " WHERE rl.workspace IN (
                    SELECT w FROM Claroline\CoreBundle\Entity\Workspace\AbstractWorkspace w
                    JOIN w.roles wr
                    JOIN wr.users ur
                    WHERE ur.id = {$user->getId()}
                ) OR doer.id = {$user->getId()}";
        }

        $dql .= ' ORDER by rl.dateLog DESC';
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults(5);

        return $query->getResult();
    }

    public function findLatestWorkspaceByUser(User $user, array $roles, $size = 5)
    {
        $dql = "
            SELECT DISTINCT w AS workspace, MAX(l.dateLog) AS max_date
            FROM Claroline\CoreBundle\Entity\Workspace\AbstractWorkspace w
            INNER JOIN Claroline\CoreBundle\Entity\Logger\Log l WITH l.workspace = w
            JOIN l.doer u
            JOIN w.roles r
            WHERE l.action = 'ws_tool_read'
            AND u.id = :userId
            AND (
        ";

        $index = 0;
        $eol = PHP_EOL;

        foreach ($roles as $role) {
            $dql .= $index > 0 ? '    OR ' : '    ';
            $dql .= "r.name = '{$role}'{$eol}";
            $index++;
        }
        $dql .= ")";
        $dql .= "
            GROUP BY w.id
            ORDER BY max_date DESC
        ";

        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($size);
        $query->setParameter('userId', $user->getId());

        return $query->getResult();
    }
}