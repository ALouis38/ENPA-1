<?php

namespace Claroline\CoreBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use JMS\SecurityExtraBundle\Annotation\Secure;
use JMS\DiExtraBundle\Annotation\InjectParams;
use JMS\DiExtraBundle\Annotation\Inject;
use Claroline\CoreBundle\Entity\Home\Type;
use Claroline\CoreBundle\Entity\Home\Content;
use Claroline\CoreBundle\Entity\Home\SubContent;
use Claroline\CoreBundle\Entity\Home\Content2Type;
use Claroline\CoreBundle\Entity\Home\Content2Region;
use Claroline\CoreBundle\Manager\HomeManager;

/**
 * @TODO doc
 */
class HomeController extends Controller
{
    private $manager;

    /**
     * @InjectParams({
     *     "manager" = @Inject("claroline.manager.home_manager")
     * })
     */
    public function __construct(HomeManager $manager)
    {
        $this->manager = $manager;
    }

    /**
     * Get content by id
     *
     * @Route(
     *     "/content/{content}/{type}/{father}",
     *     requirements={"content" = "\d+"},
     *     name="claroline_get_content_by_id_and_type",
     *     defaults={"type" = "home", "father" = null}
     * )
     *
     * @ParamConverter("content", class = "ClarolineCoreBundle:Home\Content", options = {"id" = "content"})
     * @ParamConverter("father", class = "ClarolineCoreBundle:Home\Content", options = {"id" = "father"})
     * @ParamConverter("type", class = "ClarolineCoreBundle:Home\Type", options = {"mapping" : {"type": "name"}})
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function contentAction(Content $content, Type $type, Content $father = null)
    {
        return $this->manager->render(
            'ClarolineCoreBundle:Home/types:'.(is_object($type) ? $type->getName() : 'home' ).'.html.twig',
            $this->manager->getContent($content, $type, $father),
            true
        );
    }

    /**
     * Render the home page of the platform
     *
     * @Route("/type/{type}", name="claro_get_content_by_type")
     * @Route("/", name="claro_index", defaults={"type" = "home"})
     * @Template("ClarolineCoreBundle:Home:home.html.twig")

     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function homeAction($type)
    {
        return array(
            "region" => $this->manager->getRegions(),
            "content" => $this->manager->contentLayout($type)->getContent()
        );
    }

    /**
     * Render the layout of contents by type.
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function typeAction($type, $father = null, $region = null)
    {
        return $this->manager->contentLayout($type, $father, $region);
    }

    /**
     * Render the page of types administration.
     *
     * @Route("/types", name="claroline_types_manager")
     * @Secure(roles="ROLE_ADMIN")
     *
     * @Template("ClarolineCoreBundle:Home:home.html.twig")
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function typesAction()
    {
        $types = $this->manager->getTypes();

        return array(
            "region" => $this->manager->getRegions(),
            "content" => $this->manager->render(
                "ClarolineCoreBundle:Home:types.html.twig",
                array('types' => $types)
            )->getContent()
        );
    }
    /**
     * Render the page of the creator box.
     *
     * @Route("/content/creator/{type}/{id}/{father}", name="claroline_content_creator", defaults={"father" = null})
     *
     * @param \String $type The type of the content to create.
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function creatorAction($type, $id = null, $content = null, $father = null)
    {
        return $this->manager->getCreator($type, $id, $content, $father);
    }

    /**
     * Render the HTML of the menu of sizes of the contents.
     *
     * @param \String $id The id of the content.
     * @param \String $size The size (span12) of the content.
     * @param \String $type The type of the content.
     *
     * @Route("/content/size/{id}/{size}/{type}", name="claroline_content_size")
     *
     * @Template("ClarolineCoreBundle:Home:sizes.html.twig")
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function sizeAction($id, $size, $type)
    {
        return array('id' => $id, 'size' => $size, 'type' => $type);
    }

    /**
     * Render the HTML of a content generated by an external url with Open Grap meta tags
     *
     * @Route("/content/graph", name="claroline_content_graph")
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function graphAction()
    {
        $request = $this->get('request');

        return $this->manager->getGraph($request->get("generated_content_url"));
    }

    /**
     * Render the HTML of the regions.
     *
     * @Route("/content/region/{id}", name="claroline_region")
     *
     * @param \String $id The id of the content.
     *
     * @Template("ClarolineCoreBundle:Home:regions.html.twig")
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function regionAction($id)
    {
        return array('id' => $id);
    }

    /**
     * Create new content by POST method. This is used by ajax.
     * The response is the id of the new content in success, otherwise the response is the false word in a string.
     *
     * @Route("/content/create", name="claroline_content_create")
     * @Secure(roles="ROLE_ADMIN")
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function createAction()
    {
        $request = $this->get('request');

        return $this->manager->createContent(
            $request->get('title'),
            $request->get('text'),
            $request->get('generated'),
            $request->get('type'),
            $request->get('father')
        );
    }

    /**
     * Update a content by POST method. This is used by ajax.
     * The response is the word true in a string in success, otherwise false.
     *
     * @Route("/content/update/{content}", name="claroline_content_update")
     * @Secure(roles="ROLE_ADMIN")
     *
     * @ParamConverter("content", class = "ClarolineCoreBundle:Home\Content", options = {"id" = "content"})
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function updateAction($content)
    {
        $request = $this->get('request');

        return $this->manager->UpdateContent(
            $content,
            $request->get('title'),
            $request->get('text'),
            $request->get('generated'),
            $request->get('size'),
            $request->get('type')
        );
    }

    /**
     * Reorder contents in types. This method is used by ajax.
     * The response is the word true in a string in success, otherwise false.
     *
     * @param \String $type The type of the content.
     * @param \String $a The id of the content 1.
     * @param \String $b The id of the content 2.
     *
     * @Route("/content/reorder/{type}/{a}/{b}", requirements={"a" = "\d+"}, name="claroline_content_reorder")
     *
     * @Secure(roles="ROLE_ADMIN")
     *
     * @ParamConverter("type", class = "ClarolineCoreBundle:Home\Type", options = {"mapping": {"type": "name"}})
     *
     * @ParamConverter("a", class = "ClarolineCoreBundle:Home\Content", options = {"id" = "a"})
     * @ParamConverter("b", class = "ClarolineCoreBundle:Home\Content", options = {"id" = "b"})
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function reorderAction($type, $a, Content $b = null)
    {
        return $this->manager->reorderContent($type, $a, $b);
    }

    /**
     * Delete a content by POST method. This is used by ajax.
     * The response is the word true in a string in success, otherwise false.
     *
     * @Route("/content/delete/{content}", name="claroline_content_delete")
     * @Secure(roles="ROLE_ADMIN")
     *
     * @ParamConverter("content", class = "ClarolineCoreBundle:Home\Content", options = {"id" = "content"})
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function deleteAction($content)
    {
        return $this->manager->deleteContent($content);
    }

    /**
     * Put a content into a region in front page as left, right, footer. This is sueful for menus.
     *
     * @Route("/region/{region}/{content}", requirements={"content" = "\d+"}, name="claroline_content_to_region")
     *
     * @ParamConverter("region", class = "ClarolineCoreBundle:Home\Region", options = {"mapping": {"region": "name"}})
     * @ParamConverter("content", class = "ClarolineCoreBundle:Home\Content", options = {"id" = "content"})
     *
     * @Secure(roles="ROLE_ADMIN")
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function contentToRegionAction($region, $content)
    {
        return $this->manager->contentToRegion($region, $content);
    }

}

